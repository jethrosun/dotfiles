# -*- mode: conf; indent-tabs-mode: t -*-

[user]
  # name = jethrosun
  name = Shuwen Jethro Sun
  # Require email to be configured in either .gitconfig-local or
  # .git/config (Git >= 2.8)
  useConfigOnly = true
  ; email = jethrosun@css.neu.edu
  # email = jethro.s.sun@gmail.com
  email = jethro.rules@real.com
  signingkey = 0x248A26757B9F68D6

[alias]
  # original
  lg1 = log --graph --abbrev-commit --name-only --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
  lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
  l = !"git lg1"
  lg = !"git lg2"
  #ov = -c core.pager='less -S' log --graph --pretty=format:'%C(auto)%d %s' --abbrev-commit --simplify-by-decoration --all
  #ovk = !gitk --all --simplify-by-decoration
  random = !"git add -A; git commit -am \"$(echo $(curl -s http://whatthecommit.com/index.txt)\" \")\"; git pull --rebase; git push"
  dad = !"curl https://icanhazdadjoke.com/ ; git add"
  cc = checkout -- .
  co = checkout
  m = !"git add -A; git commit -m"
  #open = !nvim `git-open.sh`

  # not boring
  squash = "!f(){ git reset --soft HEAD~${1} && git commit --edit -m\"$(git log --format=%B --reverse HEAD..HEAD@{1})\"; };f"
  mpr = "!f() { \
    declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
    declare branch=\"${2:-$currentBranch}\"; \
    if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
    git fetch origin refs/pull/$1/head:pr/$1 && \
    git checkout -B $branch && \
    git rebase $branch pr/$1 && \
    git checkout -B $branch && \
    git merge --ff-only pr/$1 && \
    git branch -D pr/$1; \
    fi \
    }; f"
  copr = "!f() { git fetch -fu ${2:-origin} refs/pull/$1/head:pr/$1 && \
    git checkout pr/$1; }; f"
  bclean = "!f() { git branch --merged ${1-master} | grep -v " ${1-master}$" | xargs -r git branch -d; }; f"
  ignore = update-index --assume-unchanged
  unignore = update-index --no-assume-unchanged
  ignored = !git ls-files -v | grep "^[[:lower:]]"
  aliases = config --get-regexp alias
  git = !exec git

  # jonhoo
  #c = commit
  s =  !"git diff --name-status HEAD ; echo ''"
  st = status
  #lg = log --oneline
  last = log --abbrev-commit -1 HEAD
  f = push --force-with-lease
  # https://stackoverflow.com/a/11688523/472927
  ss = "!f() { git stash show stash^{/$*} -p; }; f"
  sa = "!f() { git stash apply stash^{/$*}; }; f"
  sl = stash list
  # Ivan
  #aliases = "!f() { git config --get-regexp ^alias | cut -c 7-; }; f"
  amend = commit -a --amend -C HEAD
  #b2h = checkout HEAD -B
  #branch-or-sha = "!bs() { git which-branch 2> /dev/null || git sha 2> /dev/null ; }; bs" # In newer versions of git, this simpler definition of which-branch would work. symbolic-ref HEAD --short
  branches = branch -a
  #c = clone --recursive
  ca = !git add -A && git commit -av
  #cherry-pick-range = "!c() { git cherry-pick $1^..$2; }; c"
  #cpr = cherry-pick-range
  #cam = commit -am
  #clean-branches = "!r() { git branch --merged ${1-origin/master} | grep -v '*' | xargs -n1 git branch -d; }; r"
  clone = clone --recursive
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f" # Credit an author on the latest commit
  d = "!d() { git icdl $@; }; d"
  db = "!db() { git diff HEAD~"$1"; }; db"
  diff-excluding = "!f() { exclude=$1; shift; git diff $1 $2 --name-only | grep -v $exclude | xargs git diff "$@" --; }; f"
  fdiff = "!f() { filter=\"$1\"; shift; git diff $1 $2 --name-only | $filter | xargs git diff "$@" --; }; f"
  dirty = "!t() { test -n \"$(git status --porcelain)\"; }; t"
  dtbmb = !git diff `git tb`...HEAD # diff tracking branch merge base
  du = "!d() { git ls-files $1 --error-unmatch 2>/dev/null 1>/dev/null && git diff $1 || `git config --get core.pager` $1; }; d" # Diff a file or show it in git's pager if it is untracked
  ff = merge --ff-only
  ffo = !git ffr origin
  ffr = "!ffr() { git fetch $1 && git ff $1/$(git which-branch) && git suir; }; ffr"
  file-exists = "!f() { git ls-files $1 --error-unmatch > /dev/null 2> /dev/null; }; f"
  force-master = "!f() { git fetch origin && git rh && git master; }; f"
  icd = "!d() { git difftool --no-prompt --extcmd 'icdiff --cols=200' $@ | $(git config --get core.pager); }; d"
  icdl = "!d() { git difftool --no-prompt --extcmd 'icdiff --line-numbers --cols=200' $@ | $(git config --get core.pager); }; d"
  ignore = "!i() { printf \"\n$1\" >> "`git root`/.gitignore"; }; i"
  ignore-untracked="!git untracked | xargs -n1 git ignore"
  #l = log --pretty=oneline --graph
  master = checkout origin/master -B master
  modified = diff HEAD --name-only
  poh = push origin HEAD
  pohm = push origin HEAD:master
  power-clean = clean -ffd
  reb = "!r() { git rebase -i HEAD~$1; }; r" # Interactive rebase with the given number of latest commits
  remotes = remote -v
  reset-author ="!source ~/.lib/shellrc/functions.sh && git_reset_author"
  reset-origin = "!r() { git reset --hard origin/\"$(git which-branch)\" && git suir; }; r"
  rh = reset --hard
  root = rev-parse --show-toplevel
  #s = status -s
  set-working-tree = "!s() { local head=\"$(git rev-parse HEAD)\"; git reset --hard $1 && git reset --soft $head; }; s"
  sha = rev-parse HEAD
  shas = log --pretty=format:%H
  suir = submodule update --init --recursive
  tb = rev-parse --abbrev-ref --symbolic-full-name @{u}
  untracked = "!u() { git status -s | grep "??" | awk '{print $2}'; }; u"
  which-branch = "!wb() { b="$(git symbolic-ref HEAD)" && echo ${b#refs/heads/}; }; wb"
# Type-specific diff settings
[core]
  attributesfile = ~/.gitattributes
[diff "elisp"]
  xfuncname="^(\\(def.*)$"

[includeIf "gitdir:~/dev/achtung"]
  path = ~/dev/achtung/.gitconfig

[help]
  autocorrect = 1
[url "https://github.com/"]
  insteadOf = h:
[url "git@github.com:"]
  insteadOf = g:
[url "https://achtung-gitlab.ccs.neu.edu/working-papers"]
  insteadOf = working:
[url "git@achtung-gitlab.ccs.neu.edu"]
  insteadOf = lab:

[diff]
  algorithm = patience
  compactionHeuristic = true
[commit]
  ; gpgsign = true
  gpgsign = false
[include]
  path = ~/.gitconfig-local
[color]
  # config for diff-so-fancy
  ui = true
[merge]
  conflictstyle = diff3
  tool = vimdiff
[rebase]
  autosquash = true
[sendemail]
  envelopesender = auto
[pull]
  # Only do fast-forward merges automatically on pull
  #ff = only
[push]
  # Git 2.0 changes the default to simple
  default = simple
[grep]
  linenumber = true
# Global ignores
[core]
  excludesfile = ~/.gitignore_global
  editor = nvim
  pager = diff-so-fancy | less --tabs=4 -RFX
[http]
  cookiefile = /home/jethros/.gitcookies
[color "diff-highlight"]
  oldNormal = red bold
  oldHighlight = red bold 52
  newNormal = green bold
  newHighlight = green bold 22
[color "diff"]
  meta = yellow
  frag = magenta bold
  commit = yellow bold
  old = red bold
  new = green bold
  whitespace = red reverse
[magithub]
  online = false
[magithub "status"]
  includeStatusHeader = false
  includePullRequestsSection = false
  includeIssuesSection = false
[credential]
	helper = store
